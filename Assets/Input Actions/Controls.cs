//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""InGamePlayerInput"",
            ""id"": ""b3783da1-438c-43e6-96a7-ab54a3b7537c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c94f2226-08de-4719-9d40-a2a1fc915c48"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""47b75147-2c98-4e84-aeee-067364be5b9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""ea5a8563-3c03-4662-b910-fe8f6557fa56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""105f3b4d-4e49-4ed4-91d4-1109104132c9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""674460d0-3bc3-4e05-b9a2-d1a68b325b0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""592ea138-67bf-46aa-aa24-9f5f7aaffd7e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd1d301f-4cd9-4c42-863e-ff525e7a2205"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""11e5e9df-bfbc-4533-8111-090f715f3ce9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b94e0ff7-47b9-41b8-ae18-2399a4ea145b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4c9bf651-691f-41ab-8941-d2fa51b5a7d5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d929cb27-12c4-4089-973b-035d0a6b42e8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""83908c02-0469-4b32-ab0c-e484a3f829cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6e6b6ea9-b098-410d-81f0-1ec5f5e1b944"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3037264-e2ec-42f9-978a-ab9ebc2cb2df"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGamePlayerInput
        m_InGamePlayerInput = asset.FindActionMap("InGamePlayerInput", throwIfNotFound: true);
        m_InGamePlayerInput_Movement = m_InGamePlayerInput.FindAction("Movement", throwIfNotFound: true);
        m_InGamePlayerInput_Walk = m_InGamePlayerInput.FindAction("Walk", throwIfNotFound: true);
        m_InGamePlayerInput_Roll = m_InGamePlayerInput.FindAction("Roll", throwIfNotFound: true);
        m_InGamePlayerInput_PointerPosition = m_InGamePlayerInput.FindAction("PointerPosition", throwIfNotFound: true);
        m_InGamePlayerInput_Attack = m_InGamePlayerInput.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGamePlayerInput
    private readonly InputActionMap m_InGamePlayerInput;
    private IInGamePlayerInputActions m_InGamePlayerInputActionsCallbackInterface;
    private readonly InputAction m_InGamePlayerInput_Movement;
    private readonly InputAction m_InGamePlayerInput_Walk;
    private readonly InputAction m_InGamePlayerInput_Roll;
    private readonly InputAction m_InGamePlayerInput_PointerPosition;
    private readonly InputAction m_InGamePlayerInput_Attack;
    public struct InGamePlayerInputActions
    {
        private @Controls m_Wrapper;
        public InGamePlayerInputActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InGamePlayerInput_Movement;
        public InputAction @Walk => m_Wrapper.m_InGamePlayerInput_Walk;
        public InputAction @Roll => m_Wrapper.m_InGamePlayerInput_Roll;
        public InputAction @PointerPosition => m_Wrapper.m_InGamePlayerInput_PointerPosition;
        public InputAction @Attack => m_Wrapper.m_InGamePlayerInput_Attack;
        public InputActionMap Get() { return m_Wrapper.m_InGamePlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGamePlayerInputActions set) { return set.Get(); }
        public void SetCallbacks(IInGamePlayerInputActions instance)
        {
            if (m_Wrapper.m_InGamePlayerInputActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnMovement;
                @Walk.started -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnWalk;
                @Roll.started -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnRoll;
                @PointerPosition.started -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.performed -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.canceled -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnPointerPosition;
                @Attack.started -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_InGamePlayerInputActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_InGamePlayerInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public InGamePlayerInputActions @InGamePlayerInput => new InGamePlayerInputActions(this);
    public interface IInGamePlayerInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
